///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MRDT Differential Joint 2022
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef ROVE_BRUSHED
#define ROVE_BRUSHED

#include "RoveStmVnhPwm.h"
#include "RoveUsDigiMa3Pwm.h"
#include "RoveBoardMap.h"
#include "RoveWatchdog.h"
#include "RovePid.h"

#include <stdint.h>

class RoveJointBrushed
{
  public:

    RoveStmVnhPwm Motor;

    RoveUsDigiMa3Pwm Encoder;

    RovePidFloats Pid;

    uint8_t LS_UPPER = INVALID;
    uint8_t LS_LOWER = INVALID;

    int up_limit = 0;
    int low_limit = 0;

    void attachJoint(uint8_t encoder_pin);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //Limit Switch Handling
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    void attachLimitSwitches(uint8_t upperPin, uint8_t lowerPin);
    //returns whether or not the Limit switch is pressed (if we are moving past that given limit)
    bool isLowerLSPressed();
    bool isUpperLSPressed();
    void setJointLimits(int up_lim, int low_lim);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //Calculations
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    void jointDecipercent( int joint_decipercent);
    bool atJointLimit(int drive_speed);
    float getJointAngle();
    void moveToPos(float goal);

    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //Encoder Handling
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    bool JointEncoderDisconnect();

};

#endif // ROVE_DIFF
